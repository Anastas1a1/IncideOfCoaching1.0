from asgiref.sync import sync_to_async
import asyncio
import logging
import os
from contextlib import suppress
import requests
import aiogram.utils.markdown as md
# import aiogram.methods
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery, ParseMode
from aiogram.types import (
    Audio,
    Document,
    PhotoSize,
    Video,
    Voice
)
from tqdm import tqdm
from aiogram.types import ChatActions
from aiogram.types.message import ContentType, ContentTypes
from aiogram.utils.exceptions import (MessageCantBeDeleted,
                                      MessageCantBeEdited,
                                      MessageToDeleteNotFound,
                                      MessageToEditNotFound)
from aiogram.types.input_file import InputFile
from dotenv import load_dotenv

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adminsite.settings')

django.setup()

from . import markup as nav
from . import db, google_db
from .markup import YearsCallback, MonthCallback, ThemesCallback

# from coaching.database import server



# from adminpanel import views as server

load_dotenv()
TOKEN = os.getenv("TOKEN")
PAYMENTS_TOKEN = os.getenv("PAYMENTS_TOKEN")

PRICE_FIRST = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=20000*100)
PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=10000*100)

ADMINS = [1065409295, 63746635]
bot = Bot(TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO)


class Form(StatesGroup):
    admin_file_id = State()
    admin_file_name = State()
    admin_file_ext = State()
    admin_year = State()
    admin_category = State()
    admin_topic = State()
    admin_agree = State()

    name = State()

    admin_mes = State()
    last_send = State()


last_send = []
# ______________________________________________________________________Delete_mes


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


async def send_progress(progress_message, progress: int):
    empty_blocks = 10 - progress
    filled_emoji = 'üü©' * progress
    empty_emoji = '‚ñ´Ô∏è' * empty_blocks
    progress_bar = f'{filled_emoji}{empty_emoji}'
    await progress_message.edit_text(progress_bar)
# ______________________________________________________________________send_materials


async def send_material(ext, user_id, file_id, file_name):
    match ext:
        case 'document':
            mes = await bot.send_document(
                user_id, file_id,
                caption=f"{file_name}",
                disable_notification=True,
                protect_content=True
            )
        case 'audio':
            mes = await bot.send_audio(
                user_id, file_id,
                caption=f"{file_name}",
                disable_notification=True,
                protect_content=True
            )
        case 'photo':
            mes = await bot.send_photo(
                user_id, file_id,
                disable_notification=True,
                protect_content=True
            )
        case 'video':
            mes = await bot.send_video(
                user_id, file_id,
                caption=f"{file_name}",
                disable_notification=True,
                protect_content=True
            )
        case 'voice':
            mes = await bot.send_document(
                user_id, file_id,
                disable_notification=True,
                protect_content=True
            )
        case 'animation':
            mes = await bot.send_animation(
                user_id, file_id,
                disable_notification=True,
                protect_content=True
            )
        case 'video_note':
            mes = await bot.send_video(
                user_id, file_id,
                disable_notification=True,
                protect_content=True
            )
    return mes


async def file_info(message):
    print('yes')
    file_id = None
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
        ext = 'document'

    elif message.audio:
        file_id = message.audio.file_id
        file_name = message.audio.file_name
        ext = 'audio'

    elif message.photo:
        file_id = message.photo[-1].file_id
        file_name = '-'
        ext = 'photo'

    elif message.video:
        file_id = message.video.file_id
        file_name = message.video.file_name
        ext = 'video'

    elif message.voice:
        file_id = message.voice.file_id
        file_name = '-'
        ext = 'voice'

    elif message.animation:
        file_id = message.animation.file_id
        file_name = '-'
        ext = 'animation'

    elif message.video_note:
        file_id = message.video_note.file_id
        file_name = '-'
        ext = 'video_note'
    elif message.sticker:
        file_id = message.sticker.file_id
        file_name = '-'
        ext = 'sticker'
    if file_id:

        return file_id, file_name, ext

# async def send_materials(user_id: int, category: list):
#     headers_1 = []

#     year, month = category.split('/')
#     if month not in headers_1:
#         await bot.send_message(user_id, '___<b>'+month+'</b>___', parse_mode='HTML')
#         headers_1.append(month)

#     docs = server.get_themes(year, month)

#     if not docs:
#         await bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
#     else:
#         headers_2 = []
#         for doc in docs:
#             print(doc)
#             path = 'docs/'+ year +'/' + month + '/'
#             if os.path.exists(path) == False:
#                 path = 'docs/'+ year +'/' + month + ' /'

#             if doc[0] == '-':
#                 path += doc[1]
#             else:
#                 path += doc[0]+ '/'+ doc[1]
#                 if doc[0] not in headers_2:
#                     await bot.send_message(user_id,'<b>'+doc[0]+'</b>', parse_mode='HTML')
#                     headers_2.append(doc[0])
#             print(path)

#             if os.path.exists(path):
#                 with open(path, 'rb') as file:
#                     filename = os.path.basename(path)
#                     _, file_extension = os.path.splitext(filename)
#                     if file_extension in ['.jpg', '.jpeg', '.png']:
#                         photo = InputFile(path)
#                         await bot.send_photo(
#                             user_id, file,
#                             caption = f"{filename}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞",
#                             disable_notification = True,
#                             protect_content = True
#                         )
#                     elif file_extension in ['.ppt', '.pptx', '.pdf', '.doc', '.docx']:
#                         await bot.send_document(
#                             user_id, file,
#                             caption = f"{filename}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞",
#                             disable_notification = True,
#                             protect_content = True
#                         )

#                     elif file_extension == '.mp4':
#                         await bot.send_video(
#                             user_id, file,
#                             caption = f"{filename}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞",
#                             disable_notification = True,
#                             protect_content = True
#                         )
#                     elif file_extension == ['.mp3', '.m4a']:
#                         await bot.send_audio(
#                             user_id, file,
#                             caption = f"{filename}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞",
#                             disable_notification = True,
#                             protect_content = True
#                         )

#                     else:
#                         await bot.send_message(user_id,f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {filename} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
#             else:
#                 await bot.send_message(user_id,f"–§–∞–π–ª {os.path.basename(path)} –Ω–µ –Ω–∞–π–¥–µ–Ω")


# ______________________________________________________________________Commands
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    plus = await sync_to_async(db.is_plus)(message.chat.id)
    await sync_to_async(db.new_user_plus)(message.chat.first_name, message.chat.id, False)
    await bot.send_message(message.from_user.id,
                           '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Incide of Coaching. 
                –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. 
                –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è  –ø—Ä–µ–¥–ª–∞–≥–∞–µ–µ—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–∞–º —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –º–Ω–æ–≥–æ–º—É –¥—Ä—É–≥–æ–º—É. 
                –ü–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–∏–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞. 
                –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —É –Ω–∞—Å –µ—Å—Ç—å –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. –ñ–µ–ª–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?
                           '''.format(message.from_user))

    # await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n–ù–∞—á–Ω–µ–º?', reply_markup = nav.UserMainMenu)

    plus = await sync_to_async(db.is_plus)(message.chat.id)
    if plus:
        await bot.send_message(message.from_user.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {plus}! –†–∞–¥ –í–∞—Å –≤–∏–¥–µ—Ç—å! –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –í–∞—Å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=nav.UserPlusMainMenu)
    else:
        await bot.send_message(message.from_user.id, "–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –í–∞—Å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=nav.UserMainMenu)


@dp.message_handler(commands=['menu'])
async def command_start(message: types.Message):
    plus = await sync_to_async(db.is_plus)(message.chat.id)
    if plus:
        await bot.send_message(message.from_user.id, "{plus}, —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –í–∞—Å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=nav.UserPlusMainMenu)
    else:
        await bot.send_message(message.from_user.id, "{0.first_name}, —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –í–∞—Å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=nav.UserMainMenu)


@dp.message_handler(commands=['admin'])
async def command_info(message: types.Message):
    if message.chat.id in ADMINS:
        await bot.send_message(message.from_user.id, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=nav.AdminMenu)
    else:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')

# ______________________________________________________________________Cancel


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.get_state()
    await state.finish()
    await bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞', reply_markup=nav.UserMainMenu)


@dp.callback_query_handler(text="cancel", state="*")
async def cancel_inline(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    await state.get_state()
    await state.finish()
    await bot.send_message(call.message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞', reply_markup=nav.UserMainMenu)


# ______________________________________________________________________Admin

@dp.callback_query_handler(text_contains="AdminMenu")
async def admin_menu(call: CallbackQuery):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == "btn:AdminMenu:message":
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª')
        await Form.admin_mes.set()

    elif call.data == "btn:AdminMenu:del_message":
        try:
            for mes in last_send:
                asyncio.create_task(delete_message(mes, 0))
                print('—É–¥–∞–ª–µ–Ω–æ:  ', mes)
        except:
            await bot.send_message(call.message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–µ–Ω—ã')
    elif call.data == "btn:AdminMenu:docs":
        await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç —Ñ–∞–π–ª—ã (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫–µ –∏ –∏–º–µ—Ç—å —Ç–æ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)')
        await Form.admin_file_id.set()
        
    elif call.data == 'btn:AdminMenu:sync_db':
        await sync_to_async(google_db.list_files_recursively)()

# ______________________________________________________________________AdminSendMes


@dp.message_handler(state=Form.admin_mes)
async def set_admin_mes(message: types.Message, state: FSMContext):
    if message.text:
        async with state.proxy() as data:
            data['admin_mes'] = message.text
    else:
        file_id, file_name, ext = await file_info(message)
        if file_id:
            async with state.proxy() as data:
                data['admin_file_id'] = file_id
                data['admin_file_name'] = file_name
                data['admin_file_ext'] = ext
        await bot.send_message(message.chat.id, '–ö–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?\n"{}"'.format(data['admin_mes']), reply_markup=nav.SendMesMenu)
        await Form.last_send.set()


@dp.callback_query_handler(text_contains="btn:SendMesMenu:", state=Form.last_send)
async def admin_menu_send_mes(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    category = call.data.split(':')[2]
    tg_ids = sync_to_async(db.get_tg_id)(category)
    if tg_ids:
        async with state.proxy() as data:
            data['last_send'] = []
            for id in tg_ids:
                if data['admin_mes']:
                    data['last_send'].append(await bot.send_message(int(id), data['admin_mes']))
                elif data['admin_file_id']:
                    data['last_send'].append(await send_material(data['admin_file_ext'], int(id), data['admin_file_id'], data['admin_file_name']))

        await bot.send_message(call.message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.')
    else:
        await bot.send_message(call.message.chat.id, '–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
    await state.finish()


# _____________________________________________________________________________________________________TO DO

@dp.message_handler(state=Form.admin_file_id, content_types=['document', 'audio', 'photo', 'video', 'voice', 'animation', 'sticker'])
async def download_file(message: types.Message, state: FSMContext):
    progress_message = await bot.send_message(message.chat.id, '‚ñ´Ô∏è'*10)
    await bot.send_chat_action(message.chat.id, ChatActions.UPLOAD_DOCUMENT)
    await send_progress(progress_message, 1)

    file_id, file_name, ext = await file_info(message)

    await send_progress(progress_message, 4)
    if file_id:
        async with state.proxy() as data:
            data['admin_file_id'] = file_id
            data['admin_file_name'] = file_name
            data['admin_file_ext'] = ext

        file, file_tg = await sync_to_async(db.get_file_by_name)(file_name)
        
        await send_progress(progress_message, 7)
        
        if file:
            async with state.proxy() as data:
                data['admin_year'] = file.year
                data['admin_category'] = file.category
                data['admin_topic'] = file.topic
                preview = [data['admin_year'], data['admin_category'],
                        data['admin_topic'], data['admin_file_name']]
                await send_progress(progress_message, 10)
                while '-' in preview:
                    preview.remove('-')
            await delete_message(progress_message, 1)        
            
            if file_tg:
                await delete_message(progress_message, 1)
                await bot.send_message(message.chat.id, '–í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª:\n{" --> ".join(preview)}') 
                await send_material(file_tg.ext, message.chat.id, file_tg.tg_id, file_name)
                await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=nav.HaveTgFileMenu) #______________________________TODO
                await Form.admin_agree.set()
                
            else:
                await message.reply(f'–§–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∫–∞–∫ {" --> ".join(preview)}\n–í—Å—ë –≤–µ—Ä–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å?', reply_markup=nav.HaveFileMenu)
                await Form.admin_agree.set()
        else:
            await send_progress(progress_message, 8)
            years = await sync_to_async(db.get_unique_years)()
            await send_progress(progress_message, 10)
            await delete_message(progress_message, 1)
            await bot.send_message(message.chat.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤ –æ –Ω—ë–º.\n–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ–¥', reply_markup=nav.years_markup(years, True))
            await Form.admin_year.set()
    else:
        await delete_message(progress_message, 1)
        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞")


# _____________________________________________________________________________________________________AdminYear


@dp.callback_query_handler(YearsCallback.filter(space='ChoiceAdminYear'), state=Form.admin_year)
async def choice_admin_year(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    logging.info(f"call = {callback_data}")
    print('1')

    year = callback_data.get("year")
    if year == "–î—Ä—É–≥–æ–π":
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥')
        await Form.admin_year.set()
    else:
        async with state.proxy() as data:
            data['admin_year'] = year
        month = await sync_to_async(db.get_unique_category)(year)
        await bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª', reply_markup=nav.month_markup(month, year, True))


@dp.message_handler(state=Form.admin_year)
async def include_admin_year(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['admin_year'] = message.text
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª')
    await Form.admin_category.set()


# _____________________________________________________________________________________________________AdminCategory

@dp.callback_query_handler(MonthCallback.filter(space="ChoiceAdminMonth"), state=Form.admin_year)
async def choice_admin_month(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )

    logging.info(f"call = {callback_data}")
    year = callback_data.get("year")
    month = callback_data.get("month")
    if month == "–î—Ä—É–≥–æ–π":
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∏–±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª')
        await Form.admin_category.set()
    else:
        async with state.proxy() as data:
            data['admin_category'] = month
        themes = await sync_to_async(db.get_unique_topic)(year, month)
        await bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º—É', reply_markup=nav.themes_markup(themes))
        await Form.admin_topic.set()


@dp.message_handler(state=Form.admin_category)
async def include_admin_category(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['admin_category'] = message.text

    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ç–µ–º—É —Ñ–∞–π–ª–∞')
    await Form.admin_topic.set()


# _____________________________________________________________________________________________________AdminTopic

@dp.callback_query_handler(ThemesCallback.filter(space="ChoiceAdminThemes"), state=Form.admin_topic)
async def choice_admin_theme(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )

    logging.info(f"call = {callback_data}")
    topic = callback_data.get("topic")
    async with state.proxy() as data:
        data['admin_topic']=topic
    print(topic)

    if topic == "–î—Ä—É–≥–∞—è":
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ç–µ–º—É —Ñ–∞–π–ª–∞')
        await Form.admin_topic.set()
    else:
        async with state.proxy() as data:
            file = [data['admin_file_ext'], data['admin_year'], data['admin_category'],
                    topic, data['admin_file_name'], data['admin_file_id']]
            await send_material(data['admin_file_ext'], call.message.chat.id, data['admin_file_id'], data['admin_file_name'])

            await bot.send_message(call.message.chat.id, f'–§–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∫–∞–∫ {", ".join(file)}\n–í—Å—ë –≤–µ—Ä–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å?', reply_markup=nav.HaveFileMenu)
            await Form.admin_agree.set()
            # await bot.send_message(call.message.chat.id,'–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–∞–π–ª\n{}\n{}\n{}\n{}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?'.format(data['admin_year'], data['admin_category'], data['admin_topic']))

            # ______________________________________________–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


@dp.message_handler(state=Form.admin_topic)
async def include_admin_topic(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['admin_topic'] = message.text
        file = [data['admin_file_ext'], data['admin_year'], data['admin_category'],
                data['admin_topic'], data['admin_file_name'], data['admin_file_id']]
        await send_material(data['admin_file_ext'], message.chat.id, data['admin_file_id'], data['admin_file_name'])

        await bot.send_message(message.chat.id, f'–§–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∫–∞–∫ {"-->".join(file)}\n–í—Å—ë –≤–µ—Ä–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å?', reply_markup=nav.HaveFileMenu)

        # ______________________________________________–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


@dp.callback_query_handler(text_contains="HaveFileMenu", state=Form.admin_agree)
async def add_tg_file_to_db(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == "btn:HaveFileMenu:OK":
        async with state.proxy() as data:
            # try:
            add_file = await sync_to_async(db.add_file_tg)(data['admin_year'], 
                                                            data['admin_category'], 
                                                            data['admin_topic'],
                                                            data['admin_file_name'], 
                                                            data['admin_file_id'], 
                                                            data['admin_file_ext'])
            if add_file :
                await bot.send_message(call.message.chat.id, '–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            else:
                await bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            await state.finish()

    if call.data == "btn:HaveFileMenu:Change":
        years = await sync_to_async(db.get_unique_years)()
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª', reply_markup=nav.years_markup(years, True))
        await Form.admin_year.set()


# _____________________________________________________________________________________________________UserMainMenu

@dp.callback_query_handler(text_contains="UserMainMenu")
async def users_main_menu(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    user_data = await sync_to_async(db.is_plus)(call.message.chat.id)
    if call.data == 'btn:UserMainMenu:subscription':
        if not user_data:
            await call.message.answer(f'–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è...\n–°—Ç–æ–∏–º—Å–æ—Ç—å... –î–ª—è –≤–∞—Å 20')
            await call.message.answer(f'–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?', reply_markup=nav.SubscriptionMenu1)
        elif user_data:
            async with state.proxy() as data:
                data['name'] = user_data
            await call.message.answer('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è...\n–°—Ç–æ–∏–º—Å–æ—Ç—å... –î–ª—è –≤–∞—Å 10')
            await call.message.answer('''–ü—Ä–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å –Ω–∞ –∏–º—è {}.\n–í—Å–µ –≤–µ—Ä–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?'''.format(user_data), reply_markup=nav.SubscriptionMenu2)

    elif call.data == 'btn:UserMainMenu:access':
        docs  = await sync_to_async(db.my_info)(call.message.chat.id)
        
        if not docs:
            await call.message.answer('''–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –Ω–∞—à–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é!\n
                                      –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É''')
            docs  = await sync_to_async(db.degust)(call.message.chat.id)
            
        if not docs:
            for admin in ADMINS:
                await bot.send_message(admin, f'–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.message.id}')
        else:   
            for doc in docs:
                await send_material(doc[0], doc[1], doc[2], doc[3])
        
        await state.finish()
        await bot.send_message(call.message.chat.id, '–ú–µ–Ω—é:', reply_markup=nav.UserMainMenu)

        # if not docs:
        #     await call.message.answer('''–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –Ω–∞—à–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é!\n
        #                               –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É''')

        # elif len(month) < 1:
        #     if len(docs) == 1 and '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é' in month:
        #         await call.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –Ω–∞—à–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é!\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø–æ–ø—Ä–æ—É–π—Ç–µ –Ω–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É')
        #     else:
        #         await call.message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã!')
                # for category in month:
                # await send_materials(call.message.chat.id, '2023/–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é')

        # else:
        #     await call.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ', reply_markup=nav.month_markup(month))


# _____________________________________________________________________________________________________DocsMonthMenu

# @dp.callback_query_handler(text_contains="ChoiceMonth")
# async def users_main_menu(call: CallbackQuery, state: FSMContext):
#     await bot.edit_message_reply_markup(
#         chat_id=call.from_user.id,
#         message_id=call.message.message_id,
#         reply_markup=None
#     )

#     print(call.data)

#     if 'all' in call.data:
#         month = server.docs_info(call.message.chat.id)
    # c_data = call.data[]

        # _________________________________________________________________________________________TODO


@dp.callback_query_handler(text_contains="SubscriptionMenu")
async def users_main_menu(call: CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == "btn:SubscriptionMenu:yes":
        await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é')
        await Form.name.set()
        
    elif call.data == "btn:SubscriptionMenu:have_name":
        if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

        await bot.send_invoice(call.message.chat.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                               provider_token=PAYMENTS_TOKEN,
                               currency="rub",
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter="one-month-subscription",
                               payload="test-invoice-payload")


@dp.message_handler(state=Form.name)
async def include_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

        if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE_FIRST],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")


# _____________________________________________________________________________________________________Check_pay

# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message, state=FSMContext):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    async with state.proxy() as data:
        await sync_to_async(db.new_user_plus)(data['name'], message.chat.id, True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
